description: |-
  Version: 2020_10_12
  ⚠️注意配置组合生成content_md5的行处理器配置
proxy: default
normal_status_list:
  - '200'
  - '404'
login_id: ''
downloader: pycurl
min_data_length: 1
min_link_length: 0
timeout: 30
load_wait: 0
cache_ttl: 0
cache_after: 0
encoding: ''
headers: ''
download_script: ''
rows:
  - name: ❤️详情配置
    description: 注意保持字段与列表页对应
    locator: json_at
    expression: '*'
    storage_id: 10270
    if_match: ''
    if_url_match: ''
    fields:
      - name: content_md5
        description: 用于去重的md5
        data_type: varchar(1024)
        locator: hub
        expression: web_site
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators:
          - method: length
            params: 1 +inf
            fail_type: retry
        is_dedup_array: false
      - name: web_site
        description: 来源网站
        data_type: varchar(1024)
        locator: hub
        expression: web_site
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators:
          - method: script
            params: |-
              def validate(context):
                  """2020_07_13
                  验证网站名是否复制带了空格
                  """
                  import re

                  if len(context) == len(context.strip()):
                      return True
                  return False
            fail_type: retry
        is_dedup_array: false
      - name: web_site_url
        description: 来源网站地址
        data_type: varchar(1024)
        locator: hub
        expression: web_site_url
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators:
          - method: script
            params: |-
              def validate(context):
                  """Version: 2020_07_18
                  验证链接是否合法
                  """
                  import re
                  from urllib.parse import urlparse

                  text = context.strip()
                  # 调度中可能复制带了空格
                  if len(text) != len(context):
                      return False

                  rules = [
                      r"(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]",
                      r"@^(https?|ftp)://[^\s/$.?#].[^\s]*$@iS",
                      r"#\b(([\w-]+://?|www[.])[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|/)))#iS",
                  ]
                  for each in rules:
                      p = re.compile(each)
                      res = p.findall(text)
                      if res:
                          return True
                  else:
                      try:
                          q = urlparse(text)
                      except:
                          return False
                      else:
                          if all([q.scheme, q.netloc, q.path]):
                              return True
                          else:
                              return False
            fail_type: retry
        is_dedup_array: false
      - name: source_type
        description: 资讯来源分类（1. 网站）
        data_type: bigint
        locator: hub
        expression: source_type
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        is_dedup_array: false
        download_policy: not_download
        processors: []
        validators:
          - method: script
            params: |
              def validate(context):
                  """Version: 2020_07_18
                  验证资源类型字段是否设置
                  """
                  if context in ["1", "2", "3", "4"]:
                      return True
                  else:
                      return False
            fail_type: retry
      - name: copyright
        description: 是否存在版权问题
        data_type: bigint
        locator: hub
        expression: copyright
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        is_dedup_array: false
        download_policy: not_download
        processors: []
        validators:
          - method: script
            params: |-
              def validate(context):
                  """Version: 2020_07_18
                  验证版权字段是否设置
                  """
                  if context in ["0", "1"]:
                      return True
                  else:
                      return False
            fail_type: retry
      - name: publish_time
        description: 指数日期
        data_type: varchar(1024)
        locator: json_at
        expression: publish_time
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators: []
        is_dedup_array: false
      - name: name
        description: 指数名称
        data_type: varchar(1024)
        locator: json_at
        expression: name
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators: []
        is_dedup_array: false
      - name: index
        description: 指数数值
        data_type: varchar(1024)
        locator: json_at
        expression: index
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators: []
        is_dedup_array: false
    processors:
      - method: script
        params: |-
          # 计算content_md5, 数组字段去重, 不处理附件相关字段
          import hashlib
          from itertools import zip_longest


          def md5(text):
              return hashlib.md5(str(text).encode()).hexdigest()


          def process(data):
              """Version: 2020_07_18
              - 计算 网站名 发布时间 标题 内容详情 的MD5
              """
              keys = ["web_site", "publish_time", "name", "index"]
              values = [data.get(k) or "" for k in keys]

              data["content_md5"] = md5("".join(values))
              # 数组字段去重, 去空
              if data.get("tag"):
                  data["tag"] = list(set([tag for tag in data["tag"] if tag]))
              if data.get("author"):
                  data["author"] = list(set([author for author in data["author"] if author]))
              return data
    links: []
preprocessors: []
prevalidators:
  - method: regex
    params: ^(?!.*200|200).*$
    fail_type: success
    succ_type: ignore
    target: status_code
examples:
  - method: GET
    url: ''
    data: ''
    description: "\U0001F7E2配置测试保存做对比"
    should_save_sync: false
  - method: GET
    url: ''
    data: ''
    description: "\U0001F534异常测试说明:"
    should_save_sync: false
  - method: GET
    url: ''
    data: ''
    description: "\U0001F534异常测试说明:"
    should_save_sync: false
size: small
global_dedup: false
captcha: {}
use_bot: false
