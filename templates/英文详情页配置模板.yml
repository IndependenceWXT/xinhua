description: |-
  Version: 2020_08_02
  ⚠️配置前请核对版本号是否最新; 测试时注意核验字段值的数据准确性: 描述中有❤️标志的字段
proxy: default
normal_status_list:
  - '200'
  - '404'
login_id: ''
downloader: pycurl
min_data_length: 1
min_link_length: 0
timeout: 30
load_wait: 0
cache_ttl: 0
cache_after: 0
encoding: ''
headers: ''
download_script: ''
rows:
  - name: ❤️详情配置
    description: 注意保持字段与列表页对应
    locator: self
    expression: ''
    storage_id: 10270
    if_match: ''
    if_url_match: ''
    fields:
      - name: refer
        description: "\U0001F494列表页链接上线需删除"
        data_type: varchar(128)
        locator: hub
        expression: refer
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: true
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators:
          - method: script
            params: |-
              def validate(context):
                  """Version: 2020_07_18
                  验证链接是否合法
                  """
                  import re
                  from urllib.parse import urlparse

                  text = context.strip()
                  # 调度中可能复制带了空格
                  if len(text) != len(context):
                      return False

                  rules = [
                      r"(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]",
                      r"@^(https?|ftp)://[^\s/$.?#].[^\s]*$@iS",
                      r"#\b(([\w-]+://?|www[.])[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|/)))#iS",
                  ]
                  for each in rules:
                      p = re.compile(each)
                      res = p.findall(text)
                      if res:
                          return True
                  else:
                      try:
                          q = urlparse(text)
                      except:
                          return False
                      else:
                          if all([q.scheme, q.netloc, q.path]):
                              return True
                          else:
                              return False
            fail_type: retry
        is_dedup_array: false
      - name: content_md5
        description: 用于去重的md5
        data_type: varchar(1024)
        locator: hub
        expression: web_site
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators:
          - method: length
            params: 1 +inf
            fail_type: retry
        is_dedup_array: false
      - name: web_site
        description: 来源网站
        data_type: varchar(1024)
        locator: hub
        expression: web_site
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators:
          - method: script
            params: |-
              def validate(context):
                  """2020_07_13
                  验证网站名是否复制带了空格
                  """
                  import re

                  if len(context) == len(context.strip()):
                      return True
                  return False
            fail_type: retry
        is_dedup_array: false
      - name: web_site_url
        description: 来源网站地址
        data_type: varchar(1024)
        locator: hub
        expression: web_site_url
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators:
          - method: script
            params: |-
              def validate(context):
                  """Version: 2020_07_18
                  验证链接是否合法
                  """
                  import re
                  from urllib.parse import urlparse

                  text = context.strip()
                  # 调度中可能复制带了空格
                  if len(text) != len(context):
                      return False

                  rules = [
                      r"(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]",
                      r"@^(https?|ftp)://[^\s/$.?#].[^\s]*$@iS",
                      r"#\b(([\w-]+://?|www[.])[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|/)))#iS",
                  ]
                  for each in rules:
                      p = re.compile(each)
                      res = p.findall(text)
                      if res:
                          return True
                  else:
                      try:
                          q = urlparse(text)
                      except:
                          return False
                      else:
                          if all([q.scheme, q.netloc, q.path]):
                              return True
                          else:
                              return False
            fail_type: retry
        is_dedup_array: false
      - name: source_type
        description: 资讯来源分类（1. 网站）
        data_type: bigint
        locator: hub
        expression: source_type
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        is_dedup_array: false
        download_policy: not_download
        processors: []
        validators:
          - method: script
            params: |
              def validate(context):
                  """Version: 2020_07_18
                  验证资源类型字段是否设置
                  """
                  if context in ["1", "2", "3", "4"]:
                      return True
                  else:
                      return False
            fail_type: retry
      - name: copyright
        description: 是否存在版权问题
        data_type: bigint
        locator: hub
        expression: copyright
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        is_dedup_array: false
        download_policy: not_download
        processors: []
        validators:
          - method: script
            params: |-
              def validate(context):
                  """Version: 2020_07_18
                  验证版权字段是否设置
                  """
                  if context in ["0", "1"]:
                      return True
                  else:
                      return False
            fail_type: retry
      - name: content_url
        description: 正文详情url
        data_type: varchar(1024)
        locator: url_re
        expression: .*
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators:
          - method: script
            params: |-
              def validate(context):
                  """Version: 2020_07_18
                  验证链接是否合法
                  """
                  import re
                  from urllib.parse import urlparse

                  text = context.strip()
                  # 调度中可能复制带了空格
                  if len(text) != len(context):
                      return False

                  rules = [
                      r"(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]",
                      r"@^(https?|ftp)://[^\s/$.?#].[^\s]*$@iS",
                      r"#\b(([\w-]+://?|www[.])[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|/)))#iS",
                  ]
                  for each in rules:
                      p = re.compile(each)
                      res = p.findall(text)
                      if res:
                          return True
                  else:
                      try:
                          q = urlparse(text)
                      except:
                          return False
                      else:
                          if all([q.scheme, q.netloc, q.path]):
                              return True
                          else:
                              return False
            fail_type: retry
        is_dedup_array: false
      - name: title
        description: 标题
        data_type: varchar(1024)
        locator: hub
        expression: title
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors:
          - method: script
            params: |
              def process(text):
                  """Version: 2020_07_18
                  处理标题，取一个稍微小的平均的标题长度
                  """
                  import re

                  if len(re.sub(r"\s+", "", text)) < 2:
                      return f"error:{text}"
                  return text
        validators:
          - method: script
            params: "def validate(context):\n    \"\"\"Version: 2020_08_16\n    验证标题是否是省略过的, 并且文本长度是否在100内\n    \"\"\"\n    import re\n\n    max_length = 150\n    length = len(re.sub(r\"\\s+\", \"\", context))\n    if context.endswith(\"...\") or context.startswith(\"error:\"):\n        msg = f\"\U0001F525 [processor] field title validate failed {context!r}\"\n        print(msg)\n        return False\n    elif length > max_length:\n        msg = f\"\U0001F525 [validator] field title validate failed {context!r} length {len(length)} > {max_length}\"\n        print(msg)\n        return False\n    return True"
            fail_type: retry
        is_dedup_array: false
      - name: publish_time
        description: 新闻发布时间
        data_type: datetime
        locator: hub
        expression: publish_time
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors:
          - method: script
            params: |-
              def process(text):
                  """
                  处理文本, 返回处理后的文本
                  """
                  return text
          - method: text2datetime
            params: ''
        validators:
          - method: script
            params: |-
              def validate(context):
                  """Version: 2020_07_11
                  验证发布时间是否大于当前时间
                  """
                  from datetime import datetime

                  now = datetime.now()
                  pt = datetime.strptime(context, "%Y-%m-%d %H:%M:%S")
                  if pt > now:
                      return False
                  return True
            fail_type: retry
        is_dedup_array: false
      - name: news_type
        description: "\U0001F49A新闻类型"
        data_type: varchar(1024)
        locator: xpath
        expression: .
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors:
          - method: script
            params: |-
              def process(text):
                  """
                  处理替换多余字符
                  """
                  return text
        validators:
          - method: script
            params: "def validate(context):\n    \"\"\"Version: 2020_08_16\n    验证新闻类型\n    \"\"\"\n    max_length = 50\n    if context.startswith(\"error:\"):\n        msg = f\"\U0001F525 [processor] field news_type validate failed {context!r}\"\n        print(msg)\n        return False\n    elif len(context) > max_length:\n        msg = f\"\U0001F525 [validator] field news_type validate failed {context!r} length {len(context)} > {max_length}\"\n        print(msg)\n        return False\n    return True"
            fail_type: retry
        is_dedup_array: false
      - name: publish_org
        description: ❤️新闻发布来源
        data_type: varchar(1024)
        locator: xpath
        expression: .
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators:
          - method: script
            params: "def validate(context):\n    \"\"\"Version: 2020_08_16\n    验证来源中是否有error: \n        卡住未经正确处理的请求\n    \"\"\"\n    max_length = 20\n    if context.startswith(\"error:\"):\n        msg = f\"\U0001F525 [processor] field publish_org validate failed {context!r}\"\n        print(msg)\n        return False\n    elif len(context) > max_length:\n        msg = f\"\U0001F525 [validator] field publish_org validate failed {context!r} length {len(context)} > {max_length}\"\n        print(msg)\n        return False\n    return True"
            fail_type: retry
        is_dedup_array: false
      - name: tag
        description: ❤️标签
        data_type: varchar(1024)
        locator: xpath
        expression: .
        is_dedup_key: false
        multi: true
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors:
          - method: script
            params: |-
              def process(text):
                  """
                  处理文本, 返回处理后的文本
                  """
                  return text
        validators:
          - method: script
            params: "def validate(context):\n    \"\"\"Version: 2020_08_16\n    验证标签, 不同网站调整长度\n    \"\"\"\n    max_length = 20\n    if context.startswith(\"error:\"):\n        msg = f\"\U0001F525 [processor] field tag validate failed {context!r}\"\n        print(msg)\n        return False\n    # 验证长度\n    if len(context) > max_length:\n        msg = f\"\U0001F525 [validator] field tag validate failed {context!r} length {len(context)} > {max_length}\"\n        print(msg)\n        return False\n    return True"
            fail_type: retry
        is_dedup_array: false
      - name: author
        description: ❤️作者
        data_type: varchar(1024)
        locator: xpath
        expression: .
        is_dedup_key: false
        multi: true
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors:
          - method: script
            params: |-
              def process(text):
                  """
                  处理文本, 返回处理后的文本
                  """
                  return text
        validators:
          - method: script
            params: "def validate(context):\n    \"\"\"Version: 2020_08_16\n    验证中文作者是否含有非法词\n    \"\"\"\n    max_length = 50\n    if context.startswith(\"error:\"):\n        msg = f\"\U0001F525 [processor] field author validate failed {context!r}\"\n        print(msg)\n        return False\n    elif len(context) > max_length:\n        msg = f\"\U0001F525 [validator] field author validate failed {context!r} length {len(context)} > {max_length}\"\n        print(msg)\n        return False\n    return True"
            fail_type: retry
        is_dedup_array: false
      - name: author_info
        description: 作者简介
        data_type: varchar(1024)
        locator: xpath
        expression: .
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators: []
        is_dedup_array: false
      - name: abstract
        description: 新闻摘要
        data_type: varchar(1024)
        locator: xpath
        expression: .
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators:
          - method: script
            params: |-
              def validate(context):
                  """Version: 2020_08_04
                  验证摘要是否是完整的内容
                  """
                  import re

                  text = context.strip()
                  if text.endswith("..."):
                      return False
                  return True
            fail_type: retry
        is_dedup_array: false
      - name: content
        description: 新闻详情
        data_type: text
        locator: xpath
        expression: .
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors:
          - method: script
            params: |-
              def process(text):
                  """Version: 2020_07_23
                  返回的html，提取其文字内容
                  短正文置空处理
                  """
                  import re

                  if len(re.sub(r"\s+", "", text)) < 80:
                      return ""
                  return text
        validators:
          - method: script
            params: "def validate(context):\n    \"\"\"Version: 2020_08_16\n    验证内容文字\n    \"\"\"\n    if context.startswith(\"<\") and context.endswith(\">\"):\n        msg = f\"\U0001F525 [processor] field content validate failed html tag without removed\"\n        print(msg)\n        return False\n    return True"
            fail_type: retry
        is_dedup_array: false
      - name: content_html
        description: 新闻详情带html标签
        data_type: text
        locator: xpath
        expression: .
        is_dedup_key: false
        multi: false
        keep_html: true
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators:
          - method: length
            params: 1 +inf
            fail_type: retry
        is_dedup_array: false
      - name: article_file_name
        description: 附件名称
        data_type: varchar(1024)
        locator: xpath
        expression: >-
          .//*[(contains(translate(@href, "PDF", "pdf"), ".pdf") or
          contains(translate(@href, "XLS", "xls"), ".xls") or
          contains(translate(@href, "DOC", "doc"), ".doc") or
          contains(translate(@href, "ZIP", "zip"), ".zip") or
          contains(translate(@href, "RAR", "rar"), ".rar") or
          contains(translate(@href, "WPS", "wps"), ".wps")) and
          not(contains(@href, "file://") or contains(@href, "c:\") or
          contains(@href, "C:\"))] | .//*[contains(translate(@src, "MP4",
          "mp4"), ".mp4") and not(contains(@src, "file://") or contains(@src,
          "c:\") or contains(@src, "C:\"))]/@src
        is_dedup_key: false
        multi: true
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: true
        download_policy: not_download
        processors:
          - method: script
            params: |-
              def process(text):
                  """Version: 2020_08_04
                  文件名处理，提取链接中的文件名
                  """
                  if text.endswith(".mp4"):
                      return text.split("/")[-1]
                  return text
        validators: []
        is_dedup_array: false
      - name: article_file_url
        description: 附件地址
        data_type: varchar(1024)
        locator: xpath
        expression: >-
          .//*[(contains(translate(@href, "PDF", "pdf"), ".pdf") or
          contains(translate(@href, "XLS", "xls"), ".xls") or
          contains(translate(@href, "DOC", "doc"), ".doc") or
          contains(translate(@href, "ZIP", "zip"), ".zip") or
          contains(translate(@href, "RAR", "rar"), ".rar") or
          contains(translate(@href, "WPS", "wps"), ".wps")) and
          not(contains(@href, "file://") or contains(@href, "c:\") or
          contains(@href, "c:\"))]/@href | .//*[contains(translate(@src, "MP4",
          "mp4"), ".mp4") and not(contains(@src, "file://") or contains(@src,
          "c:\") or contains(@src, "C:\"))]/@src
        is_dedup_key: false
        multi: true
        keep_html: false
        extend_url: true
        is_extra: false
        allow_invalid_expression: true
        download_policy: not_download
        processors: []
        validators:
          - method: script
            params: |-
              def validate(context):
                  """Version: 2020_07_18
                  验证链接是否合法
                  """
                  import re
                  from urllib.parse import urlparse

                  text = context.strip()
                  # 调度中可能复制带了空格
                  if len(text) != len(context):
                      return False

                  rules = [
                      r"(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]",
                      r"@^(https?|ftp)://[^\s/$.?#].[^\s]*$@iS",
                      r"#\b(([\w-]+://?|www[.])[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|/)))#iS",
                  ]
                  for each in rules:
                      p = re.compile(each)
                      res = p.findall(text)
                      if res:
                          return True
                  else:
                      try:
                          q = urlparse(text)
                      except:
                          return False
                      else:
                          if all([q.scheme, q.netloc, q.path]):
                              return True
                          else:
                              return False
            fail_type: retry
        is_dedup_array: false
      - name: likes
        description: 点赞数
        data_type: bigint
        locator: xpath
        expression: .
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators:
          - method: length
            params: 1 +inf
            fail_type: retry
        is_dedup_array: false
      - name: hits
        description: 点击量访问量
        data_type: bigint
        locator: xpath
        expression: .
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors:
          - method: script
            params: |-
              def process(text):
                  """Version: 2020_07_25
                  提取点击量数字
                  """
                  import re

                  p = re.compile(r'(\d+)')
                  res = p.findall(text)
                  if res:
                      return res[0]
                  else:
                      return f"error:{text}"
          - method: script
            params: |-
              def process(text):
                  """Version: 2020_07_26
                  测试库不开启浏览器下载，忽略采集点击量验证
                  上线需删除
                  """
                  return "0" if text.startswith("error:") else text
        validators:
          - method: script
            params: |-
              def validate(context):
                  """Version: 2020_07_25
                  验证点击量是否是整数
                  """
                  if context.isdigit():
                      return True
                  elif not context.startswith("error:"):
                      return True
                  return False
            fail_type: retry
        is_dedup_array: false
      - name: replies
        description: 评论数
        data_type: bigint
        locator: xpath
        expression: .
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators:
          - method: length
            params: 1 +inf
            fail_type: retry
        is_dedup_array: false
      - name: office_account
        description: 公众号
        data_type: varchar(1024)
        locator: xpath
        expression: .
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators:
          - method: length
            params: 1 +inf
            fail_type: retry
        is_dedup_array: false
      - name: office_account_info
        description: 公众号简介
        data_type: varchar(1024)
        locator: xpath
        expression: .
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators:
          - method: length
            params: 1 +inf
            fail_type: retry
        is_dedup_array: false
    processors:
      - method: script
        params: |-
          # 计算content_md5, 数组字段去重, 不处理附件相关字段
          import hashlib
          from itertools import zip_longest


          def md5(text):
              return hashlib.md5(str(text).encode()).hexdigest()


          def process(data):
              """Version: 2020_07_18
              - 计算 网站名 发布时间 标题 内容详情 的MD5
              """
              keys = ["web_site", "publish_time", "title", "content"]
              values = [data.get(k) or "" for k in keys]

              data["content_md5"] = md5("".join(values))
              # 数组字段去重, 去空
              if data.get("tag"):
                  data["tag"] = list(set([tag for tag in data["tag"] if tag]))
              if data.get("author"):
                  data["author"] = list(set([tag for tag in data["author"] if tag]))
              return data
    links: []
preprocessors: []
prevalidators:
  - method: regex
    params: ^(?!.*200|200).*$
    fail_type: success
    succ_type: ignore
    target: status_code
examples:
  - method: GET
    url: ''
    data: ''
    description: "\U0001F7E2配置测试保存做对比"
    should_save_sync: false
  - method: GET
    url: ''
    data: ''
    description: "\U0001F534异常测试说明:"
    should_save_sync: false
  - method: GET
    url: ''
    data: ''
    description: "\U0001F534异常测试说明:"
    should_save_sync: false
size: small
global_dedup: false
captcha: {}
use_bot: false
