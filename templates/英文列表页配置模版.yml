description: |-
  Version: 2020_08_18
  ⚠️配置前请核对版本号是否最新; 测试时注意核验字段值的数据准确性: 描述中有❤️标志的字段
proxy: default
normal_status_list:
  - '200'
login_id: ''
downloader: pycurl
min_data_length: 0
min_link_length: 1
timeout: 30
load_wait: 0
cache_ttl: 0
cache_after: 0
encoding: ''
headers: ''
download_script: ''
rows:
  - name: ❤️列表配置
    description: 注意保持字段与详情页对应
    locator: xpath
    expression: ./a
    storage_id: -1
    if_match: ''
    if_url_match: ''
    fields:
      - name: refer
        description: "\U0001F494列表页链接上线需删除"
        data_type: varchar(128)
        locator: url_re
        expression: .*
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators:
          - method: script
            params: |-
              def validate(context):
                  """Version: 2020_07_18
                  验证链接是否合法
                  """
                  import re
                  from urllib.parse import urlparse

                  text = context.strip()
                  # 调度中可能复制带了空格
                  if len(text) != len(context):
                      return False

                  rules = [
                      r"(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]",
                      r"@^(https?|ftp)://[^\s/$.?#].[^\s]*$@iS",
                      r"#\b(([\w-]+://?|www[.])[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|/)))#iS",
                  ]
                  for each in rules:
                      p = re.compile(each)
                      res = p.findall(text)
                      if res:
                          return True
                  else:
                      try:
                          q = urlparse(text)
                      except:
                          return False
                      else:
                          if all([q.scheme, q.netloc, q.path]):
                              return True
                          else:
                              return False
            fail_type: retry
        is_dedup_array: false
      - name: web_site
        description: 来源网站
        data_type: varchar(1024)
        locator: hub
        expression: web_site
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators:
          - method: script
            params: |-
              def validate(context):
                  """Version: 2020_07_13
                  验证网站名是否复制带了空格
                  """
                  import re

                  if len(context) == len(context.strip()):
                      return True
                  return False
            fail_type: retry
        is_dedup_array: false
      - name: web_site_url
        description: 来源网站地址
        data_type: varchar(1024)
        locator: hub
        expression: web_site_url
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators:
          - method: script
            params: |-
              def validate(context):
                  """Version: 2020_07_18
                  验证链接是否合法
                  """
                  import re
                  from urllib.parse import urlparse

                  text = context.strip()
                  # 调度中可能复制带了空格
                  if len(text) != len(context):
                      return False

                  rules = [
                      r"(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]",
                      r"@^(https?|ftp)://[^\s/$.?#].[^\s]*$@iS",
                      r"#\b(([\w-]+://?|www[.])[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|/)))#iS",
                  ]
                  for each in rules:
                      p = re.compile(each)
                      res = p.findall(text)
                      if res:
                          return True
                  else:
                      try:
                          q = urlparse(text)
                      except:
                          return False
                      else:
                          if all([q.scheme, q.netloc, q.path]):
                              return True
                          else:
                              return False
            fail_type: retry
        is_dedup_array: false
      - name: source_type
        description: 资讯来源分类（1. 网站）
        data_type: bigint
        locator: hub
        expression: source_type
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        is_dedup_array: false
        download_policy: not_download
        processors: []
        validators:
          - method: script
            params: |-
              def validate(context):
                  """Version: 2020_07_18
                  验证资源类型字段是否设置
                  """
                  if context in ["1", "2", "3", "4"]:
                      return True
                  else:
                      return False
            fail_type: retry
      - name: copyright
        description: 是否存在版权问题
        data_type: bigint
        locator: hub
        expression: copyright
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        is_dedup_array: false
        download_policy: not_download
        processors: []
        validators:
          - method: script
            params: |-
              def validate(context):
                  """Version: 2020_07_18
                  验证版权字段是否设置
                  """
                  if context in ["0", "1"]:
                      return True
                  else:
                      return False
            fail_type: retry
      - name: title
        description: "\U0001F49A标题"
        data_type: varchar(1024)
        locator: xpath
        expression: .
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors:
          - method: script
            params: |
              def process(text):
                  """Version: 2020_07_18
                  处理标题，取一个稍微小的平均的标题长度
                  """
                  import re

                  if len(re.sub(r"\s+", "", text)) < 2:
                      return f"error:{text}"
                  return text
        validators:
          - method: script
            params: "def validate(context):\n    \"\"\"Version: 2020_08_16\n    验证标题是否是省略过的, 并且文本长度是否在100内\n    \"\"\"\n    import re\n\n    max_length = 250\n    length = len(re.sub(r\"\\s+\", \"\", context))\n    if context.endswith(\"...\") or context.startswith(\"error:\"):\n        msg = f\"\U0001F525 [processor] field title validate failed {context!r}\"\n        print(msg)\n        return False\n    elif length > max_length:\n        msg = f\"\U0001F525 [validator] field title validate failed {context!r} length {len(length)} > {max_length}\"\n        print(msg)\n        return False\n    return True"
            fail_type: retry
        is_dedup_array: false
      - name: publish_time
        description: ❤️新闻发布时间
        data_type: varchar(1024)
        locator: xpath
        expression: .
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors:
          - method: script
            params: |-
              def process(text):
                  """
                  处理文本, 返回处理后的文本
                  """
                  return text
          - method: text2datetime
            params: ''
        validators:
          - method: script
            params: |-
              def validate(context):
                  """Version: 2020_07_11
                  验证发布时间是否大于当前时间
                  """
                  from datetime import datetime
                  now = datetime.now()
                  pt = datetime.strptime(context, "%Y-%m-%d %H:%M:%S")
                  if pt > now:
                      return False
                  return True
            fail_type: retry
        is_dedup_array: false
      - name: tag
        description: ❤️标签
        data_type: varchar(1024)
        locator: xpath
        expression: .
        is_dedup_key: false
        multi: true
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors:
          - method: script
            params: |-
              def process(text):
                  """
                  处理文本, 返回处理后的文本
                  """
                  return text
        validators:
          - method: script
            params: "def validate(context):\n    \"\"\"Version: 2020_08_16\n    验证标签, 不同网站调整长度\n    \"\"\"\n    max_length = 20\n    if context.startswith(\"error:\"):\n        msg = f\"\U0001F525 [processor] field tag validate failed {context!r}\"\n        print(msg)\n        return False\n    # 验证长度\n    if len(context) > max_length:\n        msg = f\"\U0001F525 [validator] field tag validate failed {context!r} length {len(context)} > {max_length}\"\n        print(msg)\n        return False\n    return True"
            fail_type: retry
        is_dedup_array: false
      - name: author
        description: ❤️作者
        data_type: varchar(1024)
        locator: xpath
        expression: .
        is_dedup_key: false
        multi: true
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors:
          - method: script
            params: |-
              def process(text):
                  """
                  处理文本, 返回处理后的文本
                  """
                  return text
        validators:
          - method: script
            params: "def validate(context):\n    \"\"\"Version: 2020_08_16\n    验证中文作者是否含有非法词\n    \"\"\"\n    max_length = 40\n    if context.startswith(\"error:\"):\n        msg = f\"\U0001F525 [processor] field author validate failed {context!r}\"\n        print(msg)\n        return False\n    elif len(context) > max_length:\n        msg = f\"\U0001F525 [validator] field author validate failed {context!r} length {len(context)} > {max_length}\"\n        print(msg)\n        return False\n    return True"
            fail_type: retry
        is_dedup_array: false
      - name: abstract
        description: 新闻摘要
        data_type: varchar(1024)
        locator: xpath
        expression: .
        is_dedup_key: false
        multi: false
        keep_html: false
        extend_url: false
        is_extra: false
        allow_invalid_expression: false
        download_policy: not_download
        processors: []
        validators:
          - method: script
            params: |-
              def validate(context):
                  """Version: 2020_08_04
                  验证摘要是否是完整的内容
                  """
                  import re

                  text = context.strip()
                  if text.endswith("..."):
                      return False
                  return True
            fail_type: retry
        is_dedup_array: false
    links:
      - page_rule_id: null
        new_task_name: ''
        description: 详情页链接
        locator: xpath
        expression: ./@href
        processors: []
        keep_other_site: false
    processors: []
preprocessors: []
prevalidators:
  - method: regex
    params: ^(?!.*200|200).*$
    fail_type: success
    succ_type: ignore
    target: status_code
examples:
  - method: GET
    url: ''
    data: ''
    description: "\U0001F7E2配置测试保存做对比"
    should_save_sync: false
  - method: GET
    url: ''
    data: ''
    description: "\U0001F534异常测试说明:"
    should_save_sync: false
  - method: GET
    url: ''
    data: ''
    description: "\U0001F534异常测试说明:"
    should_save_sync: false
size: small
global_dedup: false
captcha: {}
use_bot: false
